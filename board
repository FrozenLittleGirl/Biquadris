
// ??????
void drop();
void Board::drop() {
	block->drop();
	block = nextBlock;
	nextBlock = level->generateBlock();
	*turn += 1;
}

void left();
void Board::left() {
	block->left();
}

void right();
void Board::right() {
	block->right();
}

void clockwise();
void Board::clockwise() {
	block->clockwise();
}


void counterclockwise();
void Board::counterclockwise() {
	block->counterclockwise();
}


bool determineLose();
bool Board::determineLose() {
	return lose;
}

int determineScore();
int Board::determineScore() {
	return score;
}


// destructor
~Board();
Board::~Board() {
	delete level;
	delete action;
}

void attach(Board* opponent, int* n);
void Board::attach(Board* opponent, int* n) {
	this->opponent = opponent;
	turn = n;
}


setRandom(bool set, string s);
Board::setRandom(bool set, string s) {
	level->changeState(set, s);
}


void addLevel(int n, int seed, bool set_seed, string file);
void Board::addLevel(int n, int seed, bool set_seed, string file) {
	delete level;
	if (n == 0) {
		level = new LevelZero{ file, seed, set_seed };
	}
	else if (n == 1) {
		level = new LevelOne{ seed, set_seed };
	}
	else if (n == 2) {
		level = new LevelTwo{ seed, set_seed };
	}
	else if (n == 3) {
		level = new LevelThree{ seed, set_seed };
	}
	else {
		level = new LevelFour{ seed, set_seed };
	}
}

void newBlock(char c = 'n');
void Board::newBlock(char c) {
	if (c == 'n') {
		this->block = level->generateBlock();
	}
	else {
		this->block = make_shared<Block>(c);
	}
}

// Don't forget to delete this pointer after the block drops
// this is in private
void addAction(Board* opponent, string s);
void Board::addAction(Board* opponent, string s) {
	cout << "choose an action" << endl;
	string s;
	cin >> s;
	if (s == "blind") {
		opponent->action = new Blind{ disp, this };
	}
	else if (s == "heavy") {
		opponent->action = new Heavy{ block.get() };
	}
	else {
		opponent->action = new Force{ disp, this };
	}
}

// .........
Blind* blind = dynamic_cast<Blind*>(action);
if (blind != nullptr) {
	restore();
}
// .........

void Board::restore() {
	int countRow = 1;
	int countCol = 1;
	for (auto cell : theBoard) {
		if (countRow >= 3) {
			for (auto c : cell) {
				if (countCol >= 3) {
					disp->notifyCell(c);   // there might be a problem
				}
				if (countCol == 9) break;
				++countCol;
			}
		}
		if (countRow == 12) break;
		++countRow;
	}
}

void notifyBlind();
void TextDisplay::notifyBlind() {
	int countRow = 1;
	int countCol = 1;
	for (auto ch = game.begin(); ch != game.end(); ++ch) {
		if (countRow >= 3) {
			for (auto c = ch.begin(); c != ch.end(); ++c) {     // there might be a problem
				if (countCol >= 3) {
					*c = '?';
				}
				if (countCol == 9) break;
				++countCol;
			}
		}
		if (countRow == 12) break;
		++countRow;
	}
}

